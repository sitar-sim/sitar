
#=========================================================
#  Compilation settings
#========================================================

#values passed by command line arguments. 
#*Don't set values here*:
#COMPILE_WITH_LOGGING   			
#COMPILE_FOR_PARALLEL_SIMULATION_WITH_OPENMP 	  


#settings that are *not* passed via command line (set values here) :
COMPILE_FOR_GDB_DEBUGGING			= True 
COMPILE_TO_IGNORE_ASSERTIONS			= False
OPTIMIZATION_LEVEL				= 2
COMPILE_TO_SHARED_LIBRARY 			= False	
COMPILE_STATIC_VERSION				= False
COMPILE_FOR_32_bit				= False
ADDITIONAL_FLAGS				= "-Wno-implicit-fallthrough" # " -std=c++0x"
#------------------------------------------------------------



if(not(OPTIMIZATION_LEVEL==0 or OPTIMIZATION_LEVEL==1 or OPTIMIZATION_LEVEL==2 or OPTIMIZATION_LEVEL ==3 )) :
	print("Incorrect optimization level specified in SConstruct file for SITAR compilation")
	exit()


#Read settings from config file
import os, glob
print("reading options from sitar_scons_config.txt...")
config_file="./sitar_scons_config.txt"
DIRS = [line.strip() for line in open(config_file, "r")]
SITAR_INSTALLATION_DIR=DIRS.pop(0)
TARGET_NAME=DIRS.pop(0)
MAIN_FILE_NAME=DIRS.pop(0)
enable_openmp=DIRS.pop(0)
if("True" in enable_openmp):
	COMPILE_FOR_PARALLEL_SIMULATION_WITH_OPENMP=True
else:
	COMPILE_FOR_PARALLEL_SIMULATION_WITH_OPENMP=False
enable_logging=DIRS.pop(0)
if("True" in enable_logging):
	COMPILE_WITH_LOGGING=True
else:
	COMPILE_WITH_LOGGING=False

additional_flags=DIRS.pop(0)
ADDITIONAL_FLAGS += additional_flags



#Check if sitar_Top.h exists
sitar_files= []
for item in DIRS:  
	sitar_files.extend(glob.glob(item+"/*.*"))

import sys
if not (any ("Top.h" in s for s in sitar_files)):
	print("\n=========================================")
	print("WARNING: No Top.h found!") 
	print("Did you forget to write a \"Top\" module?")
	print("The following files are included for compilation :")
	print(sitar_files)
	print("===========================================\n")
	sys.exit(1)
	




#Source files
Source=[ MAIN_FILE_NAME,			 	#main.cpp
	Glob(SITAR_INSTALLATION_DIR+"core/*.cpp")]      #sitar core files

for item in DIRS:  
	Source.append(Glob(item+"/*.cpp"))

#paths to header files
Cpppath=[SITAR_INSTALLATION_DIR+"core/"]
for item in DIRS: 
	Cpppath.append(item+"/")




print("\n============================================================")
print("scons messages:\n")





# Define compilation settings : 
env = Environment()
Libs=[]
Libpath=[]

#===========================================================
#compiler flags that are always enabled:
#===========================================================

env.Append(CCFLAGS = '-W')			#enable warnings
env.Append(CCFLAGS = '-Wall')			#enable warnings
env.Append(CCFLAGS =  '-O'+str(OPTIMIZATION_LEVEL))  	#optimization level
env.Append(CCFLAGS = '-pedantic')		#be pedantic in giving warnings
env.Append(CCFLAGS = ADDITIONAL_FLAGS)		#add ADDITIONAL_FLAGS



#===========================================================
#compiler flags settings
#===========================================================

if(COMPILE_STATIC_VERSION==True) :
	env.Append(LINKFLAGS =  '-static')
	env.Append(LINKFLAGS =  '-static-libgcc')
	env.Append(LINKFLAGS =  '-static-libstdc++')
	env.Append(CCFLAGS =  '-ffreestanding')


if(COMPILE_TO_IGNORE_ASSERTIONS==True) :
	env.Append(CCFLAGS =  '-DNDEBUG')
	#disable unused variable warnings when
	#assertions are removed
	#env.Append(CCFLAGS = '-Wno-unused-but-set-variable') 	
	#env.Append(CCFLAGS = '-Wno-uninitialized') 	


if(COMPILE_TO_SHARED_LIBRARY==True) :
	env.Append(CCFLAGS =  '-fPIC')
	env.Append(CCFLAGS =  '-DGENERATE_SHARED_LIBRARY_ONLY')

if(COMPILE_FOR_PARALLEL_SIMULATION_WITH_OPENMP==True) :
	env.Append(CCFLAGS =  '-fopenmp')
	Libs.append('gomp')

if(COMPILE_FOR_GDB_DEBUGGING==True) :
	env.Append(CCFLAGS = '-g')


if(COMPILE_FOR_32_bit==True) :
	env.Append(CCFLAGS =  '-m32')  	
	env.Append(LINKFLAGS =  '-m32')  


if(COMPILE_WITH_LOGGING==True) :	
	env.Append(CCFLAGS =  '-D SITAR_ENABLE_LOGGING')

	

#Libs.append('pthread')
#Libs.append('gomp')
#Libs.append('m')
#Libs.append('quadmath')
##static:
#env.Append(CCFLAGS =  '-static')
##linker flags
#env.Append(LINKFLAGS =  '-static')





if ("DGENERATE_SHARED_LIBRARY_ONLY" in additional_flags):
	env.SharedLibrary(
		#executable name
		target=TARGET_NAME,
		
		#Source files
		source=Source,

		#paths to header files
		CPPPATH=Cpppath,

		#libraries to link with 
		LIBS=Libs,
		LIBPATH=Libpath
		#SHLIBPREFIX=''
		)

#Always generate an executable
env.Program(
		#executable name
		target=TARGET_NAME,
		
		#Source files
		source=Source,

		#paths to header files
		CPPPATH=Cpppath,

		#libraries to link with 
		LIBS=Libs,
		LIBPATH=Libpath
		)

